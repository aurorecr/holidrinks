{"ast":null,"code":"var _jsxFileName = \"/Users/aurorecr/Desktop/project_3_holydrinks/holidrinks/src/shared/components/UIElements/Modal.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\nimport Backdrop from './Backdrop';\nimport './Modal.css'; // I can have 2 components in the same files.Modal component will use the ModalOverlay,this one will be seen on the screen\n\nconst ModalOverlay = props => {\n  const content = /*#__PURE__*/React.createElement(\"div\", {\n    className: `modal ${props.className}`,\n    style: props.style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: `modal__header ${props.headerClass}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, props.header)), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: props.onSubmit ? props.onSubmit : event => event.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `modal__content ${props.contentClass}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, props.children), /*#__PURE__*/React.createElement(\"footer\", {\n    className: `modal__footer ${props.footerClass}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, props.footer)));\n}; //Portals provide a way to render children into a DOM node that exists outside the hierarchy of the DOM component. Added in index.html\n\n\nconst Modal = props => {\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, props.show && /*#__PURE__*/React.createElement(Backdrop, {\n    onClick: props.onCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 22\n    }\n  }), /*#__PURE__*/React.createElement(CSSTransition, {\n    in: props.show,\n    mountOnEnter: true,\n    unmountOnExit: true,\n    timeout: 200,\n    classNames: \"modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(ModalOverlay, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default Modal;","map":{"version":3,"sources":["/Users/aurorecr/Desktop/project_3_holydrinks/holidrinks/src/shared/components/UIElements/Modal.js"],"names":["React","ReactDOM","CSSTransition","Backdrop","ModalOverlay","props","content","className","style","headerClass","header","onSubmit","event","preventDefault","contentClass","children","footerClass","footer","Modal","show","onCancel"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,aAAP,C,CACA;;AAGA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,QAAMC,OAAO,gBACX;AAAK,IAAA,SAAS,EAAG,SAAQD,KAAK,CAACE,SAAU,EAAzC;AAA4C,IAAA,KAAK,EAAEF,KAAK,CAACG,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAG,iBAAgBH,KAAK,CAACI,WAAY,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,KAAK,CAACK,MAAX,CAFF,CADF,eAMC;AAAM,IAAA,QAAQ,EAAGL,KAAK,CAACM,QAAN,GAAiBN,KAAK,CAACM,QAAvB,GAAkCC,KAAK,IAAIA,KAAK,CAACC,cAAN,EAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGC;AAAK,IAAA,SAAS,EAAG,kBAAiBR,KAAK,CAACS,YAAa,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,KAAK,CAACU,QADT,CAHD,eAOC;AAAQ,IAAA,SAAS,EAAG,iBAAgBV,KAAK,CAACW,WAAY,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,KAAK,CAACY,MADT,CAPD,CAND,CADF;AAsBD,CAvBD,C,CAwBA;;;AAEA,MAAMC,KAAK,GAAGb,KAAK,IAAI;AACrB,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGA,KAAK,CAACc,IAAN,iBAAc,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAEd,KAAK,CAACe,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFjB,eAKG,oBAAC,aAAD;AACC,IAAA,EAAE,EAAEf,KAAK,CAACc,IADX;AAEC,IAAA,YAAY,MAFb;AAGC,IAAA,aAAa,MAHd;AAIC,IAAA,OAAO,EAAE,GAJV;AAKC,IAAA,UAAU,EAAC,OALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMC,oBAAC,YAAD,oBAAkBd,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAND,CALH,CADF;AAkBD,CAnBD;;AAqBA,eAAea,KAAf","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport Backdrop from './Backdrop';\nimport './Modal.css';\n// I can have 2 components in the same files.Modal component will use the ModalOverlay,this one will be seen on the screen\n\n\nconst ModalOverlay = props => {\n  const content = (\n    <div className={`modal ${props.className}`} style={props.style}>\n      <header className={`modal__header ${props.headerClass}`}>\n        {/* with ${props... > so by using the modal, I can also add my classes to the modal  */}\n        <h2>{props.header}</h2>\n      </header>\n\n     <form onSubmit={ props.onSubmit ? props.onSubmit : event => event.preventDefault()}>\n     {/* in case this form give the possibility to add content that is automatically wrapped in it */}\n     {/* if I render any buttons inside of that form it will not reload the page when I submit */}\n      <div className={`modal__content ${props.contentClass}`}>\n        {props.children}\n      </div>\n\n      <footer className={`modal__footer ${props.footerClass}`}>\n        {props.footer}\n      </footer>\n\n    </form>\n  </div>\n);\n\n};\n//Portals provide a way to render children into a DOM node that exists outside the hierarchy of the DOM component. Added in index.html\n\nconst Modal = props => {\n  return (\n    <React.Fragment>\n        {/* React.Fragment for sibling top level elements  */}\n      {props.show && <Backdrop onClick={props.onCancel} />}\n      {/* if there is a show prop it will render the backdrop and\n        on the backdrop, we can click and I will not trigger an on cancel method or function which I receive on */}\n       <CSSTransition\n        in={props.show}\n        mountOnEnter\n        unmountOnExit\n        timeout={200}\n        classNames=\"modal\">\n        <ModalOverlay {...props} />\n        {/* here it forward all the props get from outside to modal overlay */}\n        {/* {...props} is the spread operator that takes all the key-value pairs of the props object and spreads them as attributes in the modal overlay> to create a general modal  */}\n      </CSSTransition>\n    </React.Fragment>\n  );\n};\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}