{"ast":null,"code":"var _jsxFileName = \"/Users/aurorecr/Desktop/project_3_holydrinks/holidrinks/src/shared/components/UIElements/Map.js\";\nimport React, { useRef, useEffect } from 'react'; //useRef is a hook, useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component\n// By using the Hook useEffect, you tell React that your component needs to do something after render. React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates. In this effect, we set the document title, but we could also perform data fetching or call some other imperative API.\n\nimport './Map.css';\n\nconst Map = props => {\n  const mapRef = useRef(); //in this constant I point the div : <div ref ={mapRef}\n\n  const {\n    center,\n    zoom\n  } = props; //I destructur \n\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n      // This is a constructor function  now  available on the global window object in the end because I added the info google map and keys in index.html\n      center: center,\n      zoom: zoom //by using a prop I can control those tools from outside of the component\n\n    });\n    new window.google.maps.Marker({\n      position: props.center,\n      map: map\n    }); //here I render the market, it's the localisation on the map of the place matching with the address so the red drop icone,this will show the marker in the center of the map\n  }, [center, zoom]);\n  return (\n    /*#__PURE__*/\n    // div that contain the google map in it\n    React.createElement(\"div\", {\n      ref: mapRef //this is where the connection is establish \n      ,\n      className: `map ${props.className}` //here we can customize the map\n      ,\n      style: props.style //can create the inline style of the map here if needed\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    })\n  );\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/aurorecr/Desktop/project_3_holydrinks/holidrinks/src/shared/components/UIElements/Map.js"],"names":["React","useRef","useEffect","Map","props","mapRef","center","zoom","map","window","google","maps","current","Marker","position","className","style"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC,C,CACA;AACA;;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AACnB,QAAMC,MAAM,GAAGJ,MAAM,EAArB,CADmB,CAEnB;;AAEA,QAAM;AAAEK,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAmBH,KAAzB,CAJmB,CAKnB;;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,GAAG,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBR,GAAvB,CAA2BE,MAAM,CAACO,OAAlC,EAA2C;AACvD;AACEN,MAAAA,MAAM,EAAEA,MAF6C;AAGrDC,MAAAA,IAAI,EAAGA,IAH8C,CAIrD;;AAJqD,KAA3C,CAAZ;AAOA,QAAIE,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBE,MAAvB,CAA8B;AAAEC,MAAAA,QAAQ,EAAEV,KAAK,CAACE,MAAlB;AAA0BE,MAAAA,GAAG,EAAEA;AAA/B,KAA9B,EARc,CASd;AACD,GAVQ,EAUN,CAACF,MAAD,EAASC,IAAT,CAVM,CAAT;AAYA;AAAA;AACE;AACA;AACE,MAAA,GAAG,EAAEF,MADP,CAEE;AAFF;AAGE,MAAA,SAAS,EAAG,OAAMD,KAAK,CAACW,SAAU,EAHpC,CAIE;AAJF;AAKE,MAAA,KAAK,EAAEX,KAAK,CAACY,KALf,CAME;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAWD,CA9BD;;AAgCA,eAAeb,GAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\n//useRef is a hook, useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component\n// By using the Hook useEffect, you tell React that your component needs to do something after render. React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates. In this effect, we set the document title, but we could also perform data fetching or call some other imperative API.\nimport './Map.css';\n\nconst Map = props => {\n  const mapRef = useRef();\n  //in this constant I point the div : <div ref ={mapRef}\n  \n  const { center, zoom } = props;\n  //I destructur \n\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n    // This is a constructor function  now  available on the global window object in the end because I added the info google map and keys in index.html\n      center: center,\n      zoom:  zoom\n      //by using a prop I can control those tools from outside of the component\n    });\n  \n    new window.google.maps.Marker({ position: props.center, map: map });\n    //here I render the market, it's the localisation on the map of the place matching with the address so the red drop icone,this will show the marker in the center of the map\n  }, [center, zoom]);  \n\n  return (\n    // div that contain the google map in it\n    <div\n      ref={mapRef}\n      //this is where the connection is establish \n      className={`map ${props.className}`}\n      //here we can customize the map\n      style={props.style}\n      //can create the inline style of the map here if needed\n    ></div>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}